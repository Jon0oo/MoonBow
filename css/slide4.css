.slide4{
    display: flex;
  flex-direction: column;
  

  
}

.slide4 .slide-section{
    position: relative;
    height: 100vh;
    width: 100vw;
}

.slide4 .text-section{
  position: absolute;
  top: 14vh;
  justify-content: center;
  display: flex;

}

.slide4 .image-headline{
  font-size: 5rem;
  color: white;
  text-align: center;
  margin-bottom: 20px;
}


.slide4 .image-section {
  display: flex;
  flex-direction: column;
  gap: 40px;
  padding: 20px;
  background: #272625;
  padding: 10vw;
  padding-top: 40vh;
}

.image-row {
  display: flex;
  gap: 30px;
  height: 80vh;
  overflow: visible;
  position: relative;
}

.image-column {
  flex: 1;
  overflow: hidden;
  transition: flex 0.4s ease;
  border-radius: 15px;
  cursor: pointer;

  transition: transform 0.4s ease, z-index 0s, flex 0.4s ease;
  
  z-index: 1;
  position: relative;
}
.deco-element {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none; /* Prevent interaction with the background */
  display: flex;
justify-content: center;
align-content: center;
}
.deco-element #deco1 {
  position: absolute;
  top: 115.5%;
  left: 4%;
  width: 2vw;
  height: auto;
  opacity: 1;
  
  background-size: cover;
  
}
.deco-element #deco2 {
  position: absolute;
  top: 115.5%;
  left: 94%;
  width: 2vw;
  height: auto;
  opacity: 1;
  
  background-size: cover;
  
}

.animated-text {
  position: absolute;
  bottom: 0;
  left: 0;
  padding: 10px;       /* optional spacing from edges */
  color: white;
  font-size: 2rem;
  font-weight: 600;
  text-align: left;    /* align text to left */
  transition: transform 0.3s ease-out;

  transform: scaleX(1);         /* <- Set initial state */
  transform-origin: left;  
  
}

.word {
  display: block;       /* forces each word on a new line */
  margin-bottom: 0.2em; /* space between stacked words */
}

.image-column.right .animated-text {
  right: 0;
  left: unset;
  transform-origin: right; /* <- persist this */
}

.image-column.right .animated-text .word{
  text-align: right;
}

.image-column:hover .animated-text {
  transform: scaleX(1.7);
}
.image-column.left:hover .animated-text{
  transform-origin: left;
}

.image-column.right:hover .animated-text{
  transform-origin: right;
}





.image-column:hover {
  flex: 1.3;
}

.image-column img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  
  display: block;
  border-radius: 15px;
  position: absolute;
  object-fit: cover;
  object-position: center;

  top: 0;
  left: 0;
  
  
  transition: none;
  

}

/* container left intact, remove direct background (we use pseudo-layers) */
.image-column .overlay-hover {
  position: absolute;
  inset: 0;
  background: none;              /* gradient moved to pseudo-elements */
  opacity: 0;                     /* keep your initial hidden state */
  transition: opacity 0.3s ease;  /* same container opacity transition */
  pointer-events: none;
}

/* shared pseudo-layer setup */
.image-column .overlay-hover::before,
.image-column .overlay-hover::after {
  content: "";
  position: absolute;
  inset: 0;
  pointer-events: none;
  transition: opacity 0.6s ease; /* crossfade timing (changeable) */
  will-change: opacity;
  z-index: 0;
}

/* -----------------------
   LEFT / default columns
   (fade comes from left -> use `to right`)
   ----------------------- */
/* default (non-active) layer */
.image-column .overlay-hover::before {
  opacity: 1;
  background: linear-gradient(
    to right,
    rgba(0, 0, 0, 0.8) 0%,
    rgba(0, 0, 0, 0.7) 30%,
    rgba(0, 0, 0, 0.15) 100%
  );
}

/* active (intensified) layer, same direction */
.image-column .overlay-hover::after {
  opacity: 0;
  background: linear-gradient(
    to right,
    rgba(0, 0, 0, 1) 0%,
    rgba(0, 0, 0, 0.8) 50%,
    rgba(0, 0, 0, 0.55) 100%
  );
}

/* -----------------------
   RIGHT columns
   (fade comes from right -> use `to left`)
   ----------------------- */
.image-column.right .overlay-hover::before {
  background: linear-gradient(
    to left,
    rgba(0, 0, 0, 0.8) 0%,
    rgba(0, 0, 0, 0.7) 30%,
    rgba(0, 0, 0, 0.15) 100%
  );
}

.image-column.right .overlay-hover::after {
  background: linear-gradient(
    to left,
    rgba(0, 0, 0, 1) 0%,
    rgba(0, 0, 0, 0.8) 50%,
    rgba(0, 0, 0, 0.55) 100%
  );
}

/* -----------------------
   Active crossfade: show ::after, hide ::before
   ----------------------- */
.image-column.active .overlay-hover::after {
  opacity: 1;
}
.image-column.active .overlay-hover::before {
  opacity: 0;
}


.image-column .overlay-hover2 {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to right, rgba(0, 0, 0, 95), rgba(0, 0, 0, 0.85));
  opacity: 0; /* initially hidden */
  transition: opacity 0.3s ease; /* smooth transition */
  z-index: 100;
}
.image-column.right .overlay-hover2 {
 background: linear-gradient(to left, rgba(0, 0, 0, 95), rgba(0, 0, 0, 0.85));
}




.image-column:hover .overlay-hover {
  opacity: 1; /* show overlay on hover */
}



.image-column.active {
  transform: scale(1.2);
  z-index: 999;
   transition: transform 0.4s ease, z-index 0s; /* instant z-index rise */
  
}

.image-column.inactive .overlay-hover2 {
  opacity: 1; /* show overlay on hover */
}


.image-column.active .animated-text {
  transform: translateX(100%);
  transition: transform 0.3s ease-out;
}
.image-column.left.active .animated-text {
  transform: translateX(-100%);
  transition: transform 0.3s ease-out;
}

.marker {
  position: absolute;
  width: 20px;
  height: 20px;
  pointer-events: none;
}

.line {
  position: absolute;
  background-color: white;
  border-radius: 1px;
}

/* Horizontal line */
.line.horizontal {
  top: 0;
  left: 0;
  width: 12px;
  height: 0.5px;
}

/* Vertical line */
.line.vertical {
  top: 0;
  left: 0;
  width: 0.5px;
  height: 12px;
}

/* Caps */
.cap {
  position: absolute;
  background-color: white;
  border-radius: 1px;
}

/* Horizontal cap: short vertical bar at the end of horizontal line */
.cap-horizontal {
  width: 0.5px;
  height: 6px;
  top: -2.5px;           /* move up by half cap thickness (2px / 2) */
  left: 12px;          /* right end of horizontal line */
}

/* Vertical cap: short horizontal bar at the end of vertical line */
.cap-vertical {
  width: 6px;
  height: 0.5px;
  top: 12px;           /* bottom end of vertical line */
  left: -2.5px;          /* move left by half cap thickness */
}


.marker.top-left {
  transform: scale(5) rotate(0deg);
}

.marker.top-right {
  transform: scale(5) rotate(90deg);
}

.marker.bottom-right {
  transform: scale(5) rotate(180deg);
}

.marker.bottom-left {
  transform: scale(5) rotate(270deg);
}



.image-column .animated-text-full {
  position: absolute;
  bottom: 0;
  left: 0;
  padding: 10px;       /* optional spacing from edges */
  color: white;
  font-size: 1.5rem;
  font-weight: 600;
  text-align: left;    /* align text to left */
  transition: transform 0.3s ease-out;
  opacity:0;
  transform: translateX(-100%);         /* <- Set initial state */
  transform-origin: left;  

  height:100%;
  padding:7%;
  display: flex;
  justify-content: space-between;
  flex-direction: column;
} 
.image-column.left .animated-text-full {
  transform: translateX(100%);         /* <- Set initial state */
  
}

.image-column.active .animated-text-full {
  opacity: 1;
  transform: translateX(0%);
  transition: transform 0.3s ease-out, opacity 0.3s ease-out;
}


/* tune these to change size/positioning */
.sentence {
 --indent: -0.7rem;
  --gap: -8.7rem;
  --thickness: 2px;
  --vert-height: 1.1em;
  --vert-top: 0.2em;
  position: relative;
  display: block;
  padding-left: var(--indent);
  margin: 0 0 1rem 0;
  color: inherit;
  pointer-events: none;
}

/* HORIZONTAL part (runs under first line, right-edge sits at text start) */
.sentence::after {
  content: "";
  position: absolute;
  left: 0;
  top: calc(var(--vert-top) + var(--vert-height) - (var(--thickness) / 2));
  width: calc(var(--indent) - var(--gap));
  height: var(--thickness);
  background: #fff;        /* white line */
  pointer-events: none;
  z-index: 1;
}

/* VERTICAL part (the upright stroke, located at the right end of the horizontal) */
.sentence::before {
  content: "";
  position: absolute;
  left: calc(var(--indent) - var(--gap) - (var(--thickness) / 2));
  top: var(--vert-top);
  width: var(--thickness);
  height: var(--vert-height);
  background: #fff;        /* white line */
  pointer-events: none;
  z-index: 2;
}

/* -------------------------
   Mirrored variant (horizontal goes left, vertical sits at the left end of text)
   Apply by adding the `mirrored` class to .sentence
   ------------------------- */
.sentence.mirrored {
  padding-left: 0;
  padding-right: var(--indent); /* reserve same space on the right */
}

/* horizontal shifted to right edge */
.sentence.mirrored::after {
  left: auto;
  right: 0;
  top: calc(var(--vert-top) + var(--vert-height) - (var(--thickness) / 2));
  width: calc(var(--indent) - var(--gap));
  height: var(--thickness);
  background: #fff;
}

/* vertical placed at the inner end of the horizontal (near the text start) */
.sentence.mirrored::before {
  left: auto;
  right: calc(var(--indent) - var(--gap) - (var(--thickness) / 2));
  top: var(--vert-top);
  width: var(--thickness);
  height: var(--vert-height);
  background: #fff;
}


@media (max-width: 2500px) {
  .image-column .animated-text-full {
    font-size: 2.05rem; 
  }
}
@media (max-width: 2000px) {
.image-column .animated-text-full {
    font-size: 1.5rem; 
  }
}
@media (max-width: 768px) {
.image-column .animated-text-full {
    font-size: 1rem; 
  }
}
@media (max-width: 500px) {
.image-column .animated-text-full {
    font-size: 0.8rem; 
  }
}
